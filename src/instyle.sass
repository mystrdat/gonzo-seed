/*
  inStyleâ„¢
  github.com/salsita/inStyle
  2016 | MIT
  ============================== */

// Helpers
@function __listToString($list, $glue: '', $is-nested: false)
  $result: null
  @for $i from 1 through length($list)
    $e: nth($list, $i)
    @if type-of($e) == list
      $result: $result#{to-string($e, $glue, true)}
    @else
      $result: if($i != length($list) or $is-nested, $result#{$e}#{$glue}, $result#{$e})
  @return $result

@function __replaceInList($list, $old-value, $new-value, $recursive: false)
  $result: ()
  @for $i from 1 through length($list)
    @if type-of(nth($list, $i)) == list and $recursive
      $result: append($result, replace(nth($list, $i), $old-value, $new-value, $recursive))
    @else
      @if nth($list, $i) == $old-value
        $result: append($result, $new-value)
      @else
        $result: append($result, nth($list, $i))
  @return $result

@function __removeFromList($list, $value, $recursive: false)
  $result: ()
  @for $i from 1 through length($list)
    @if type-of(nth($list, $i)) == list and $recursive
      $result: append($result, remove(nth($list, $i), $value, $recursive))
    @else if nth($list, $i) != $value
      $result: append($result, nth($list, $i))
  @return $result

@function __reverseList($list, $recursive: false)
  $result: ()
  @for $i from length($list)*-1 through -1
    @if type-of(nth($list, abs($i))) == list and $recursive
      $result: append($result, reverse(nth($list, abs($i)), $recursive))
    @else
      $result: append($result, nth($list, abs($i)))
  @return $result

// In mixin
=in($selectors)
  $final: ()
  $current: &
  $selectors: selector-parse($selectors)
  // Loop through individual in() selectors
  @each $selector in $selectors
    $depthMap: ()
    // Find compound element matches in all parent selectors
    @each $parent in $current
      // Save maximum length of matched compound to compare relevancy
      $parentIndex: index($current, $parent)
      $depthMap: map-merge($depthMap, ($parentIndex: 0))
      @each $component in $selector
        $simple: simple-selectors($component)
        // Test all matches starting with full compound and reducing for each step
        @for $i from 0 through length($simple) - 1
          @if $i > 0
            $simple: __removeFromList($simple, nth($simple, length($simple)))
          @if index($parent, __listToString($simple)) and length($simple) > map-get($depthMap, $parentIndex)
            $depthMap: map-merge($depthMap, ($parentIndex: length($simple)))
    // Get deepest matching parent indexes
    $matchedParents: ()
    $best: 0
    @each $key, $value in $depthMap
      $best: if($value > $best, $value, $best)
    @each $key, $value in $depthMap
      @if $best > 0 and $value == $best
        $matchedParents: append($matchedParents, $key, comma)
    // Generate new parent selectors
    @if length($matchedParents) > 0
      // Enhance highest matched compounds in fitting parents
      @each $index in $matchedParents
        $currentSelector: nth($current, $index)
        // Start indexing from current element
        $lastIndex: length($currentSelector)
        @each $component in __reverseList($selector)
          $simple: simple-selectors($component)
          $state: ()
          $matched: false
          @for $i from 0 through length($simple) - 1
            @if $i > 0
              $state: join(nth($simple, length($simple)), $state)
              $simple: __removeFromList($simple, nth($simple, length($simple)))
            $tryBase: __listToString($simple)
            $newState: if($i > 0, __listToString($state), '')
            @if index($currentSelector, $tryBase) and not $matched
              // Save current index and enhance matched parent selector
              $lastIndex: index($currentSelector, $tryBase)
              $currentSelector: __replaceInList($currentSelector, $tryBase, unquote($tryBase + $newState))
              $matched: true
          @if not $matched
            // Prepend current component to parent selector
            $lastIndex: 1
            $currentSelector: join($component, $currentSelector)
        // Add to results
        $final: append($final, $currentSelector, comma)
    @else
      // Prepend selectors to parent
      $final: append($final, selector-parse($selector + ' ' + $current), comma)
  @at-root #{$final}
    @content
