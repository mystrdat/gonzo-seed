/*
  inStyleâ„¢
  github.com/salsita/inStyle
  2016 | MIT
  ============================== */

// Helpers
@function __listToString($list, $glue: '', $is-nested: false)
  $result: null
  @for $i from 1 through length($list)
    $e: nth($list, $i)
    @if type-of($e) == list
      $result: $result#{to-string($e, $glue, true)}
    @else
      $result: if($i != length($list) or $is-nested, $result#{$e}#{$glue}, $result#{$e})
  @return $result

@function __replaceInString($string, $search, $replace: '')
  $index: str-index($string, $search)
  @if $index
    @return str-slice($string, 1, $index - 1) + $replace + __replaceInString(str-slice($string, $index + str-length($search)), $search, $replace)
  @return $string

@function __trimString($string)
  $index: str-index($string, ' ')
  @if $index == 1
    @return __trimString(str-slice($string, $index + 1, -1))
  @else if $index == str-length($string)
    @return __trimString(str-slice($string, 1, $index - 1))
  @return $string

@function __stringToSelectorList($string, $delimiter: ',', $separator: comma)
  $list: ()
  $sum: str-length($string)
  @for $i from 1 through $sum
    $str: str-index($string, $delimiter)
    @if str-length($string) >= 1 and $str == null
      $list: append($list, unquote(__trimString($string)), $separator)
      $string: ''
    @if type-of($str) == number
      $each: str-slice($string, 0, ($str - 1))
      $list: append($list, unquote(__trimString($each)), $separator)
      $string: str-slice($string, ($str + 1), $sum)
  @return $list

@function __replaceInList($list, $old-value, $new-value, $recursive: false)
  $result: ()
  @for $i from 1 through length($list)
    @if type-of(nth($list, $i)) == list and $recursive
      $result: append($result, replace(nth($list, $i), $old-value, $new-value, $recursive))
    @else
      @if nth($list, $i) == $old-value
        $result: append($result, $new-value)
      @else
        $result: append($result, nth($list, $i))
  @return $result

@function __removeFromList($list, $value, $recursive: false)
  $result: ()
  @for $i from 1 through length($list)
    @if type-of(nth($list, $i)) == list and $recursive
      $result: append($result, remove(nth($list, $i), $value, $recursive))
    @else if nth($list, $i) != $value
      $result: append($result, nth($list, $i))
  @return $result

@function __reverseList($list, $recursive: false)
  $result: ()
  @for $i from length($list)*-1 through -1
    @if type-of(nth($list, abs($i))) == list and $recursive
      $result: append($result, reverse(nth($list, abs($i)), $recursive))
    @else
      $result: append($result, nth($list, abs($i)))
  @return $result

// In mixin
=in($selectors)
  $final: ()
  $current: &
  $selectors: __stringToSelectorList($selectors)
  @each $selector in $selectors
    $selector: __stringToSelectorList($selector, ' ', space)
    $matchedIndexes: ()
    @each $parent in $current
      @each $component in $selector
        $simple: simple-selectors(inspect($component))
        $element: nth($simple, 1)
        @if index($parent, $element)
          $matchedIndexes: append($matchedIndexes, index($current, $parent), comma)
    @if length($matchedIndexes) > 0
      @each $index in $matchedIndexes
        $currentSelector: nth($current, $index)
        @each $component in __reverseList($selector)
          $simple: simple-selectors(inspect($component))
          $element: nth($simple, 1)
          $state: if(length($simple) > 1, __listToString(__removeFromList($simple, $element)), '')
          @if index($currentSelector, $element)
            $currentSelector: __replaceInList($currentSelector, $element, unquote($element + $state))
          @else
            $currentSelector: join($component, $currentSelector)
        $final: append($final, $currentSelector, comma)
    @else
      $final: append($final, selector-parse($selector + ' ' + $current), comma)
  @at-root #{$final}
    @content


=out($selectors)
  @debug __stringToSelectorList($selectors)
  @debug length(__stringToSelectorList($selectors))
  #{__stringToSelectorList($selectors)}
    @content
